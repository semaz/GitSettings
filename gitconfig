[core]
	filemode = false

	# default editor
	editor = nano

	# Use custom gitignore
	excludesfile = ignore

	autocrlf = true
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

[gc]
	auto = 1

[help]
    # Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]
    # Include summaries of merged commits in newly created merge commit messages
	log = true
[pull]
        rebase = false

[push]
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
	default = current

[apply]
    # Detect whitespace errors when applying a patch
	whitespace = fix

[color]
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[alias]
    l           = "log --graph --abbrev-commit --pretty='format:%C(blue)%h%C(red)%d%C(yellow) %s %C(green)%an%Creset, %ar'"
    f           = fetch --all --prune
    patch       = pull

	# Commit all changes
	c 	        = commit -a -m

	# Amend the currently staged files to the latest commit
    amend       = commit --amend --reuse-message=HEAD

    # Find commits by commit message
    fm          = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # commits not pushed to $1, master by default
    unpushed    = cherry -v

    # Clone a repository including all submodules
	cl	        = clone --recursive

	dh   	    = diff HEAD^
  	dm   	    = diff master

	# status
	s 	        = status

	# detailed status
	sb 	        = status -sb

	# Show verbose output about tags, branches or remotes
    tags        = tag -n1 -l
    branches    = branch -a
    remotes     = remote -v

    # show a list of tags sorted by `sort` version compare (ie, more or less rpmvercmp)
    tagsort     = !sh -c 'git tag -l $1 | sort --version-sort'

	# Switch to a branch, creating it if necessary
    go          = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  	# remove local commit without loosing changes
    rmc         = reset HEAD~1 --soft

  	# List contributors with number of commits
    contributors = shortlog --summary --numbered

[safe]
	directory = *
